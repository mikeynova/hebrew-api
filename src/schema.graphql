type Query {
  users: [User!]!
  user(token: String!): User!
  group(name: String!): Group!
  groups: [Group!]!
  lessons: [Lesson!]!
  lesson(id: ID!): Lesson!
  page(pageNumber: Int, id: ID): Page
}

type Mutation {
  fbAuth(facebookId: String!, name: String!): AuthPayload
  signup(email: String!, password: String!, name: String): AuthPayload
  login(email: String!, password: String!): AuthPayload
  postGroup(name: String!): Group!
  postLesson(name: String!, groupId: String!): Lesson!
  postPage(data: String!, pageNumber: Int!, lessonId: String!): Page!
  deletePage(lessonId: String!, pageNumber: Int!): Page!
  deleteUser(id: ID!): User!
  SignUpMutation(password: String!, name: String!): AuthPayload
  completeLesson(token: String!, lessonId: String!): User!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String
  password: String
  facebookId: String
  completedLessons: String
}

type Group {
  id: ID!
  name: String!
  lessons: [Lesson!]!
}

type Lesson {
  id: ID!
  name: String!
  group: Group
  pages: [Page!]!
}

type Page {
  id: ID!
  pageNumber: Int!
  data: String!
  lesson: Lesson!
}
